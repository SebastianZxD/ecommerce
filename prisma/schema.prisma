generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  verified      Boolean   
  role          UserRole  @default(USER)
  accounts      Account[]
  carts         Cart[]
  orders        Order[]
  userDetails   UserDetail[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
}

model UserDetail {
  id          String      @id @default(cuid())
  address     String
  phone       String
  userId      String
  user        User?       @relation(fields: [userId], references: [id])
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Int
  imageURL    String?
  createdAt   DateTime    @default(now()) @map("created_at")
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  items       CartItem[]
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])
}

model CartItem {
  id          String      @id @default(cuid())
  quantity    Int
  product     Product     @relation(fields: [productId], references: [id])
  productId   String
  cart        Cart        @relation(fields: [cartId], references: [id])
  cartId      String
  price       Int
}

model Order {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  items       OrderItem[]
  userId      String
  user        User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id          String      @id @default(cuid())
  quantity    Int
  product     Product     @relation(fields: [productId], references: [id])
  productId   String
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String
}